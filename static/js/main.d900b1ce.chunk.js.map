{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","evt","target","value","setState","props","type","placeholder","this","onChange","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","classNames","important","onClick","TodoList","todos","elements","map","item","id","itemProps","key","ItemStatusFilter","buttons","name","filter","onFilterChange","isActive","ItemAddForm","onLabelChange","onSubmit","preventDefault","onAdd","App","maxId","todoData","createTodoItem","addItem","text","newItem","deleteItem","idx","findIndex","slice","toggleProperty","arr","propName","oldItem","length","todo","toLowerCase","indexOf","visibleItems","filterTodo","searchTodo","doneCount","todoCount","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d900b1ce.chunk.js","sourcesContent":["import AppHeader from './app-header';\nexport default AppHeader;\n","import React from 'react';\nimport './app-header.css';\n\n// Имя компонента обязательно с Заглавной буквы\nconst AppHeader = ({ toDo, done }) => {\n  return (\n    <div className='app-header d-flex'>\n      <h1>Todo List</h1>\n      <h2>\n        {toDo} more to do, {done} done\n      </h2>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import SearchPanel from './search-panel';\nexport default SearchPanel;\n","import React, { Component } from 'react';\nimport './search-panel.css';\n\n/*\n  Компонент SearchPanel генерирует событие\n  this.onSearchChange на каждое нажатие клавиши\n  чтобы App обновлял список\n*/\n\nexport default class SearchPanel extends Component {\n  state = {\n    term: '',\n  };\n\n  // # Обработчик передачи ввода value в App\n  onSearchChange = (evt) => {\n    const term = evt.target.value;\n    this.setState({ term }); // term: term\n\n    this.props.onSearchChange(term);\n  };\n\n  // # Второй метод\n  // onSearchChange = (evt) => {\n  //   const { value } = evt.target;\n  //   this.setState({ term: value }, () => {\n  //     this.props.onSearchChange(this.state.term);\n  //   });\n  // };\n\n  render() {\n    return (\n      <input\n        className='form-control search-input'\n        type='text'\n        placeholder='type to search'\n        // Контролируемый компонент\n        value={this.state.term}\n        onChange={this.onSearchChange}\n      />\n    );\n  }\n}\n","import TodoListItem from './todo-list-item';\nexport default TodoListItem;\n","import React from 'react';\nimport './todo-list-item.css';\n\nconst TodoListItem = ({ label, onDeleted, onToggleImportant, onToggleDone, done, important }) => {\n  let classNames = 'todo-list-item';\n\n  // Алгоритм reconciliation React сравнит состояние компонента до и после, и отрендарит только новый класс в DOM\n  if (done) {\n    classNames += ' done';\n  }\n\n  if (important) {\n    classNames += ' important';\n  }\n\n  return (\n    <div className={classNames}>\n      <span className='todo-list-item-label' onClick={onToggleDone}>\n        {label}\n      </span>\n\n      <div className='todo-list-item-btn'>\n        <button\n          type='button'\n          className='btn btn-outline-success btn-sm float-right'\n          onClick={onToggleImportant}\n        >\n          <i className='fa fa-exclamation' />\n        </button>\n\n        <button\n          type='button'\n          className='btn btn-outline-danger btn-sm float-right'\n          onClick={onDeleted}\n        >\n          <i className='fa fa-trash-o' />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoListItem;\n\n// # Компонент Class\n// class TodoListItem extends Component {\n//   // ! Нельзя изменять State напрямую, только читать\n//   state = {\n//     done: false,\n//     important: false,\n//   };\n\n//   // # Обработчик события\n//   onLabelClick = () => {\n//     /*\n//       ! setState\n//       1) Устанавливает состояние, если состояние изменилось, необходим перерендарить компонент\n//       То есть заново запустить функцию render в react\n//       Переданный объект через setState наложиться поверх предыдущего state\n\n//       2) this.setState асинхронная функция - поэтому такой код this.state.done\n//       может работать не всегда правильно, так как нельзя рассчитывать,\n//       что текущий state в самом свежем состоянии.\n//       Для того чтобы быть точно уверен, что state находиться в финальном состоянии\n//       и его можно использовать, для того чтобы вычислить новый state\n//       необходимо использовать функцию внутри this.setState((state - текущий) => {}\n\n//     */\n\n//     // # Небезопасный вариант установки состояния\n//     // Использовать когда состояния не зависит от предыдущего состояния\n//     this.setState({\n//       done: !this.state.done,\n//     });\n//   };\n\n//   // # Обработчик события\n//   onMarkImportant = () => {\n//     // # Безопасный вариант установки состояния\n//     this.setState(({ important }) => {\n//       return {\n//         important: !important,\n//       };\n//     });\n//   };\n\n//   // # Функция отображения компонента\n//   render() {\n//     // У компонентов классов, доступ к props через This\n//     const { label, onDeleted } = this.props;\n//     const { done, important } = this.state;\n//     let classNames = 'todo-list-item';\n\n//     // Алгоритм reconciliation React сравнит состояние компонента до и после, и отрендарит только новый класс в DOM\n//     if (done) {\n//       classNames += ' done';\n//     }\n\n//     if (important) {\n//       classNames += ' important';\n//     }\n\n//     return (\n//       <div className={classNames}>\n//         <span className='todo-list-item-label' onClick={this.onLabelClick}>\n//           {label}\n//         </span>\n\n//         <button\n//           type='button'\n//           className='btn btn-outline-success btn-sm float-right'\n//           onClick={this.onMarkImportant}\n//         >\n//           <i className='fa fa-exclamation' />\n//         </button>\n\n//         <button type='button' className='btn btn-outline-danger btn-sm float-right' onClick={onDeleted}>\n//           <i className='fa fa-trash-o' />\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\n// # Функциональный компонент\n/* const TodoListItemFunc = ({ label, important = false }) => {\n  const spanStyle = {\n    color: important ? 'steelblue' : 'black',\n    fontWeight: important ? 'bold' : 'normal',\n  };\n\n  return (\n    <div className='todo-list-item'>\n      <span className='todo-list-item' style={spanStyle}>\n        {label}\n      </span>\n\n      <button type='button' className='btn btn-outline-success btn-sm float-right'>\n        <i className='fa fa-exclamation' />\n      </button>\n\n      <button type='button' className='btn btn-outline-danger btn-sm float-right'>\n        <i className='fa fa-trash-o' />\n      </button>\n    </div>\n  );\n}; */\n","import TodoList from './todo-list';\nexport default TodoList;\n","import React from 'react';\nimport TodoListItem from '../todo-list-item';\nimport './todo-list.css';\n\n// Имя компонента обязательно с Заглавной буквы\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone }) => {\n  /*\n    ! Если имена свойств компонента совпадает с именами свойств объекта который передается\n    label={item.label} important={item.important}\n\n    То при помощи Spread для объекта, можно переделать код выше на {...item}\n    Взять каждое свойства из объекта item и передать его в качестве атрибута, со значением в TodoListItem\n  */\n\n  const elements = todos.map((item) => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <li key={id} className='list-group-item'>\n        <TodoListItem\n          {...itemProps}\n          onDeleted={() => onDeleted(id)}\n          onToggleImportant={() => onToggleImportant(id)}\n          onToggleDone={() => onToggleDone(id)}\n        />\n      </li>\n    );\n  });\n\n  return <ul className='list-group todo-list'>{elements}</ul>;\n};\n\nexport default TodoList;\n","import ItemStatusFilter from './item-status-filter';\nexport default ItemStatusFilter;\n","import React, { Component } from 'react';\nimport './item-status-filter.css';\n\n/*\n  В Компоненте ItemStatusFilter вынесли описание кнопок в отдельный массив, чтобы не дублировать.\n  Текущая активная кнопка передается как свойство.\n  Это продолжение идеи \"Контролируемых компоненетов\"\n*/\n\nexport default class ItemStatusFilter extends Component {\n  // У компонентов классов, доступ к props через this\n\n  buttons = [\n    // name - название фильтра, label - как выглядит кнопка\n    { name: 'all', label: 'All' },\n    { name: 'active', label: 'Active' },\n    { name: 'done', label: 'Done' },\n  ];\n\n  render() {\n    const { filter, onFilterChange } = this.props;\n\n    const buttons = this.buttons.map(({ name, label }) => {\n      const isActive = filter === name ? 'btn-info' : 'btn-outline-secondary';\n\n      return (\n        <button\n          type='button'\n          className={`btn ${isActive}`}\n          key={name}\n          // Отправляем значение нажатого name в App тем самым меняя filter в state App\n          onClick={() => onFilterChange(name)}\n        >\n          {label}\n        </button>\n      );\n    });\n\n    return <div className='btn-group'>{buttons}</div>;\n  }\n}\n\n// # Функциональный компонент\n/* const ItemStatusFilterFunc = () => {\n  return (\n    <div className='btn-group'>\n      <button type='button' className='btn btn-info'>\n        All\n      </button>\n      <button type='button' className='btn btn-outline-secondary'>\n        Active\n      </button>\n      <button type='button' className='btn btn-outline-secondary'>\n        Done\n      </button>\n    </div>\n  );\n}; */\n","import ItemAddForm from './item-add-form';\nexport default ItemAddForm;\n","import React, { Component } from 'react';\nimport './item-add-form.css';\n\nexport default class ItemAddForm extends Component {\n  state = {\n    label: '',\n  };\n\n  // # Обрработчик, функция получения value из input\n  onLabelChange = (evt) => {\n    const { value } = evt.target;\n    this.setState({\n      label: value,\n    });\n  };\n\n  // # Обработчик, отправки формы\n  onSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.onAdd(this.state.label);\n\n    // Обнуляет состояние и input.value\n    this.setState({\n      label: '',\n    });\n  };\n\n  /*\n    # Неконтролируемый компонент:\n    Когда нету связи между внутренним state и элементом input, и если изменить\n    state, input не измениться, так как компонент не узнает об изменениях. Хотя в данной модели источником истины является input.\n    Получается без связи есть два состояния, state и input.values\n\n    # Контролируемым компонент:\n    Для того чтобы сделать контролируемый компонент и связать input и state\n    Необходимо сделать, что значение элемента устанавливалось из состояние компонента\n    value={this.state.value}\n  */\n\n  render() {\n    return (\n      <form className='item-add-form ' onSubmit={this.onSubmit}>\n        <input\n          type='text'\n          placeholder='What needs to be done'\n          className='form-control'\n          value={this.state.label}\n          onChange={this.onLabelChange}\n        />\n        <button className='btn btn-outline-secondary'>add item</button>\n      </form>\n    );\n  }\n}\n","import App from './app';\nexport default App;\n","import React, { Component } from 'react'; // Для преобразования jsx\n\n/*\n  Если Webpack видит, что импортируется папка\n  './app-header\n  То внутри этой папки он будет по дефолту искать index.js\n  и если он существует, то он будет использовать его по умолчанию,\n  тем самым можно не писать /app-header/app-header'\n  Для этого необходимо создать файл index.js внутри папки компонента\n\n  Было import AppHeader from './app-header/app-header';\n*/\n\nimport AppHeader from '../app-header';\nimport SearchPanel from '../search-panel';\nimport TodoList from '../todo-list';\nimport ItemStatusFilter from '../item-status-filter';\nimport ItemAddForm from '../item-add-form';\n\nimport './app.css';\n\n// () - для группировки jsx тегов\n// Virtual DOM - Легковесные Объекты\n\n/*\n  1) Атрибуты, свойства (CamelCase c маленькой буквы, можно передать любое значение) -> props\n  2) html в for -> в jsx htmlFor\n  3) Если в свойстве не передать значение, то умолчанию оно true\n     disabled эквивалентен disabled = {true}\n*/\n\nexport default class App extends Component {\n  // # Инициализация state + обработчиков без proposal-class-properties\n  // constructor() {\n  //   super();\n  //   this.deleteItem = () => {\n  //       console.log(`Done ${this.props.label}`)\n  //   }\n  //   this.state = {\n  //     done: false,\n  //   };\n  // }\n\n  // Генерация последовательного id начиная с 100 (можно мутировать)\n  maxId = 100;\n\n  // ! Нельзя изменять (мутировать) State напрямую, только читать\n  state = {\n    // Первоначальное состояние\n    todoData: [\n      this.createTodoItem('Drink Coffee'),\n      this.createTodoItem('Make Awesome App'),\n      this.createTodoItem('Have a lunch'),\n    ],\n    term: '', // Строка по которой будет проходить фильтрация (текст поиска),\n    filter: 'all', // Кнопки фильтрации: all, active, done,\n  };\n\n  // # Функция по созданию нового TodoItem\n  createTodoItem(label) {\n    // Новый объект\n    return {\n      label, // label: label-> es5\n      important: false,\n      done: false,\n      id: this.maxId++, // Он находиться не в state, его можно мутировать\n    };\n  }\n\n  // # Функция по (умутабельному) переключению свойства у объекта в setState\n  toggleProperty(arr, id, propName) {\n    const idx = arr.findIndex((item) => item.id === id);\n    const oldItem = arr[idx];\n    const newItem = {\n      ...oldItem,\n      [propName]: !oldItem[propName],\n    };\n\n    // # Второй способ изменения объекта в массиве\n    // const newArray = [...arr];\n    // newArray[idx][propName] = !newArray[idx][propName];\n\n    return [\n      ...arr.slice(0, idx), // от 0 до вставляемого\n      newItem, // вставляемый элемент\n      ...arr.slice(idx + 1), // от вставляемого до конца\n    ];\n  }\n\n  // # Функция по Поиска по значению term из state (ввод пользователя)\n  searchTodo(todos, term) {\n    if (term.length === 0) return todos;\n\n    // Если содержит строку term в label TotoItem\n    return todos.filter((todo) => {\n      return todo.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    });\n  }\n\n  // # Функция по Фильтрации по значению filter из state (кнопки)\n  filterTodo(todos, filter) {\n    switch (filter) {\n      case 'all':\n        return todos;\n      case 'active':\n        return todos.filter((item) => !item.done); // невыполненные\n      case 'done':\n        return todos.filter((item) => item.done); // выполненные\n      default:\n        return todos;\n    }\n  }\n\n  // # Обработчик, функция по добавлению элементов\n  addItem = (text) => {\n    // Новый объект\n    const newItem = this.createTodoItem(text);\n\n    this.setState(({ todoData }) => {\n      // Добавления в начало\n      // const newTodoData = [newItem, ...todoData];\n\n      // Добавления в конец\n      const newTodoData = [...todoData, newItem];\n\n      return {\n        todoData: newTodoData,\n      };\n    });\n  };\n\n  // # Обработчик, функция по удалению элементов\n  // Для того чтобы удалить React элемент необходимо удалить его из источника данных\n  deleteItem = (id) => {\n    // ! Нельзя мутировать state\n    this.setState(({ todoData }) => {\n      // state.todoData\n\n      // # 1 Способ удаления элемента из массива\n      const idx = todoData.findIndex((item) => item.id === id);\n      const newTodoData = [\n        ...todoData.slice(0, idx), // от 0 до удаляемого\n        ...todoData.slice(idx + 1), // от удаленного до конца\n      ];\n\n      // # 2 Способ удаления элемента из массива\n      // const newTodoData2 = todoData.filter((item) => item.id !== id);\n\n      return {\n        todoData: newTodoData,\n      };\n    });\n  };\n\n  // # Обработчик, функция переключения\n  onToggleImportant = (id) => {\n    this.setState(({ todoData }) => {\n      const newTodoData = this.toggleProperty(todoData, id, 'important');\n      return {\n        todoData: newTodoData,\n      };\n    });\n  };\n\n  // # Обработчик, функция переключения\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => {\n      const newTodoData = this.toggleProperty(todoData, id, 'done');\n      return {\n        todoData: newTodoData,\n      };\n    });\n  };\n\n  // # Обработчик, функция обновления term в state при вводе (Поиска)\n  onSearchChange = (term) => {\n    this.setState({ term }); // term: term\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  // Функция отображения компонента\n  render() {\n    const { todoData, term, filter } = this.state;\n\n    // Поиск элементов по term и последующая фильтрация по filter\n    const visibleItems = this.filterTodo(this.searchTodo(todoData, term), filter);\n\n    // Сколько элементов (выполнено) с done = true\n    const doneCount = todoData.filter((todo) => todo.done).length;\n    // Сколько всего осталось\n    const todoCount = todoData.length - doneCount;\n\n    return (\n      <div className='todo-app'>\n        <AppHeader toDo={todoCount} done={doneCount} />\n        <div className='top-panel d-flex'>\n          <SearchPanel onSearchChange={this.onSearchChange} />\n          <ItemStatusFilter filter={filter} onFilterChange={this.onFilterChange} />\n        </div>\n        <TodoList\n          todos={visibleItems}\n          onDeleted={this.deleteItem}\n          onToggleImportant={this.onToggleImportant}\n          onToggleDone={this.onToggleDone}\n        />\n        <ItemAddForm onAdd={this.addItem} />\n      </div>\n    );\n  }\n}\n","import React from 'react'; // Для преобразования jsx\nimport ReactDOM from 'react-dom';\n// Основной компонент\nimport App from './components/app';\n\n// * React - элемент <h1>Hello, world</h1> (то, «из чего сделаны» компоненты)\n// * React - компонент const HelloWorld = () => <h1>Hello, world</h1>;\n\n// Первый параметр: React - <App /> элемент, а не React - (функция) компонент App\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}